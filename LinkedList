class Node:
    def __init__(self,data):
        self.data=data
        self.next=None

    def set_data(self,data):
        self.data=data

    def get_data(self):
        return self.data

    def set_next(self,next):
        self.next=next

    def get_next(self):
        return self.next

class LinkedList:
    def __init__(self):
        self.head=None
        self.tail=None

    def get_head(self):
        return self.head

    def get_tail(self):
        return self.tail

    def insert_at_end(self,data):   
        new_node=Node(data)  #create new node
        if(self.head is None): #if empty
            self.head=self.tail=new_node    #set new node as head & tail
            print ("element added successfully ")#+str(self.tail.get_data())
        else:   #if not empty
            self.tail.set_next(new_node)   #set tail next to new node
            self.tail=new_node             #make new node as tail
            print("element added successfully ")#+str(self.tail.get_data())

    def insert_at_beginning(self,data):
        new_node=Node(data)
        new_node.set_next(self.head)
        self.head=new_node
        return "data inserted"

    def insert_in_between(self,data,data_before):
        new_node=Node(data)
        if(data_before==None):    #if data_before is not specified
            new_node.set_next(self.head)
            self.head=new_node
            if(new_node.get_next()==None):
                self.tail=new_node
        else:  #if data_before is specified
            node_before=self.find_node(data_before)   #find node
            if(node_before is not None):    #if found node
                new_node.set_next(node_before.get_next())   #set next of new node
                node_before.set_next(new_node)            #set next of node_before
            else:      #if node not found
                print(data_before," is not present in the linked list")


    def find_node(self,data):
        temp=self.head
        while temp is not None:
            if temp.get_data()==data:
                return temp
            temp=temp.next
        return None

    def delete(self,data):
        node=self.find_node(data)
        if (node is not None):  #if data is found and not empty
            if(node==self.head):     #if data is head
                if(self.head==self.tail):  
                    self.tail=None
                self.head=node.get_next()
            else:
                temp=self.head
                while(temp is not None ):  #to travel till that element
                    if(temp.get_next()==node):   #if next element is ur data to be deleted
                        temp.set_next(node.get_next())   #set before element next to node
                        if(node==self.tail):   #if element deleted is tail
                            self.tail=temp #set previous element as tail
                        node.set_next(None)  
                        break
                    temp=temp.get_next()    #else travel till the next element is found
            print("element deleted")
        else:
            print(data," is not present in linkedlist")

    def display(self):
        temp=self.head
        while temp is not None:
            print(temp.get_data())
            temp=temp.get_next()

if __name__=="__main__":
    mylist=LinkedList()
    while True:
        print("\n Select option")
        print("1)Add at end : ","2) Add before: ","3) Add at beginning: ","4) Delete: ","5) find node: ","6) Display")
        do=int(input("Enter your choice: "))
        if do==1:
            data=int(input("Enter the element to be inserted: "))
            result=mylist.insert_at_end(data)
            print(result)
            #print(mylist)
        elif do==2:
            data=int(input("enter the element to be inserted: "))
            data_before=int(input("enter the element before: "))
            result=mylist.insert_in_between(data,data_before)
            print(result)
            #print(mylist)
        elif do==3:
            data=int(input("enter the element to be inserted: "))
            mylist.insert_at_beginning(data)
        elif do==4:
            data=int(input("enter the data to be deleted: "))
            mylist.delete(data)
        elif do==5:
            data=int(input("enter the elemnt to be searched: "))
            result=mylist.find_node(data)
            if result is not None:
                print(result)
            else:
                print("data not found")
        elif do==6:
            mylist.display()
        else:
            print("wrong selection")

'''
The Montessari Public School has planned to organize a cultural evening. The Teacher has framed a schedule based on an idea given by the students.
Assume that the schedule is as below:
Name	Rahul	Sheema	Gitu	Tarun	Tom
Item	Solo Song	Dance	Plays Flute	Gymnastics	MIME
					
The teacher instructed the children to be ready by holding each other’s hands while standing on the stage and they have to come forward and perform when their turn comes. It is decided that Rahul would perform at the beginning and once again in the middle of the show. After Rahul’s first performance, he would join the other children, in his new position(after Gitu). After Rahul occupies the new position, Swetha would join the children at the end for delivering the vote of thanks.
Assume that there will always be odd number of children initially.
Use the Child class and children_list provided to implement the class Performance as given in the below class diagram.
1. In the constructor of Performance class, initialize children_list
2. Display the schedule
3. Change Rahul’s position after his performance and display the updated schedule
4. Add Swetha and display the updated schedule
__init__(children_list)	 Initializes the children list
change_position(child)	 Used to change the position of the child passed as the argument to the middle position
add_new_child(child)	 Used for adding a new child passed as the argument to the end of the schedule


'''

class Node:
    def __init__(self,data):
        self.data=data
        self.next=None

    def set_data(self,data):
        self.data=data

    def get_data(self):
        return self.data

    def set_next(self,next):
        self.next=next

    def get_next(self):
        return self.next

class LinkedList:
    def __init__(self):
        self.head=None
        self.tail=None

    def get_head(self):
        return self.head

    def get_tail(self):
        return self.tail

    def insert_at_end(self,data):   
        new_node=Node(data)  #create new node
        if(self.head is None): #if empty
            self.head=self.tail=new_node    #set new node as head & tail
            return "Element added successfully  " #+ str(self.__tail.get_data()) 
        else:   #if not empty
            self.tail.set_next(new_node)   #set tail next to new node
            self.tail=new_node             #make new node as tail
            return "Element added successfully  " #+ str(self.__tail.get_data()) 

    def insert_at_beginning(self,data):
        new_node=Node(data)
        new_node.set_next(self.head)
        self.head=new_node
        return "data inserted"

    def insert_in_between(self,data,data_before):
        new_node=Node(data)
        if(data_before==None):    #if data_before is not specified
            new_node.set_next(self.head)
            self.head=new_node
            if(new_node.get_next()==None):
                self.tail=new_node
        else:  #if data_before is specified
            node_before=self.find_node(data_before)   #find node
            if(node_before is not None):    #if found node
                new_node.set_next(node_before.get_next())   #set next of new node
                node_before.set_next(new_node)            #set next of node_before
            else:      #if node not found
                print(data_before," is not present in the linked list")


    def find_node(self,data):
        temp=self.head
        while temp is not None:
            if temp.get_data()==data:
                return temp
            temp=temp.next
        return None

    def delete(self,data):
        node=self.find_node(data)
        if (node is not None):  #if data is found and not empty
            if(node==self.head):
                if(self.head==self.tail):
                    self.tail=None
                self.head=node.get_next()
            else:
                temp=self.head
                while(temp is not None ):
                    if(temp.get_next()==node):
                        temp.set_next(node.get_next())
                        if(node==self.tail):
                            self.tail=temp
                        node.set_next(None)
                        break
                    temp=temp.get_next()
            print("element deleted")
        else:
            print(data," is not present in linkedlist")

    def display(self):
        temp=self.head
        while temp is not None:
            print(temp.get_data())
            temp=temp.get_next()

class Child:
    def __init__(self,name,item_to_perform):
        self.__name=name
        self.__item_to_perform=item_to_perform

    def get_name(self):
        return self.__name

    def get_item_to_perform(self):
        return self.__item_to_perform

    def __str__(self):
        return (self.__name+" "+self.__item_to_perform)

class Performance:
    def __init__(self,children_list):
        self.__children_list=children_list

    def get_children_list(self):
        return self.__children_list

    def change_position(self,child):
        temp=self.__children_list.get_head()
        temp1=self.__children_list.get_head()
        while(temp.get_next()):
            temp1=temp1.get_next()
            if temp.get_next().get_next():
                temp=temp.get_next().get_next()
        self.__children_list.delete(child)
        self.__children_list.insert_in_between(child,temp1.get_data())

    def add_new_child(self,child):
        temp=self.__children_list.get_head()
        while(temp.get_next()):
            temp=temp.get_next()
        self.__children_list.insert_in_between(child,temp.get_data())

child1=Child("Rahul","solo song")
child2=Child("Seema","Dance")
child3=Child("Gitu","plays flute")
child4=Child("Tarun","Gymnastics")
child5=Child("Tom","Mime")

children_list=LinkedList()
children_list.insert_at_end(child1)
children_list.insert_at_end(child2)
children_list.insert_at_end(child3)
children_list.insert_at_end(child4)
children_list.insert_at_end(child5)

performance=Performance(children_list)
print("The order of performances:")
performance.get_children_list().display()

print()
print("After rahul's first performance: ")
performance.change_position(child1)
performance.get_children_list().display()

print()

child6=Child("Swetha","Vote of Thanks")
print("After swetha is added in the list: ")
performance.add_new_child(child6)
performance.get_children_list().display()


'''
Write a python program to remove all duplicate elements from a sorted linked list containing integer data.
Use the LinkedList class and methods in it to implement the above program.

Example: 
Input LinkedList: 10 10 20 20 30 30 30 40 50
Output LinkedList: 10 20 30 40 50

'''

class Node:
    def __init__(self,data):
        self.data=data
        self.next=None

    def set_data(self,data):
        self.data=data

    def get_data(self):
        return self.data

    def set_next(self,next):
        self.next=next

    def get_next(self):
        return self.next

class LinkedList:
    def __init__(self):
        self.head=None
        self.tail=None

    def get_head(self):
        return self.head

    def get_tail(self):
        return self.tail

    def insert_at_end(self,data):   
        new_node=Node(data)  #create new node
        if(self.head is None): #if empty
            self.head=self.tail=new_node    #set new node as head & tail
            return "Element added successfully  " #+ str(self.__tail.get_data()) 
        else:   #if not empty
            self.tail.set_next(new_node)   #set tail next to new node
            self.tail=new_node             #make new node as tail
            return "Element added successfully  " #+ str(self.__tail.get_data()) 

    def insert_at_beginning(self,data):
        new_node=Node(data)
        new_node.set_next(self.head)
        self.head=new_node
        return "data inserted"

    def insert_in_between(self,data,data_before):
        new_node=Node(data)
        if(data_before==None):    #if data_before is not specified
            new_node.set_next(self.head)
            self.head=new_node
            if(new_node.get_next()==None):
                self.tail=new_node
        else:  #if data_before is specified
            node_before=self.find_node(data_before)   #find node
            if(node_before is not None):    #if found node
                new_node.set_next(node_before.get_next())   #set next of new node
                node_before.set_next(new_node)            #set next of node_before
            else:      #if node not found
                print(data_before," is not present in the linked list")


    def find_node(self,data):
        temp=self.head
        while temp is not None:
            if temp.get_data()==data:
                return temp
            temp=temp.next
        return None

    def delete(self,data):
        node=self.find_node(data)
        if (node is not None):  #if data is found and not empty
            if(node==self.head):
                if(self.head==self.tail):
                    self.tail=None
                self.head=node.get_next()
            else:
                temp=self.head
                while(temp is not None ):
                    if(temp.get_next()==node):
                        temp.set_next(node.get_next())
                        if(node==self.tail):
                            self.tail=temp
                        node.set_next(None)
                        break
                    temp=temp.get_next()
            print("element deleted")
        else:
            print(data," is not present in linkedlist")

    def display(self):
        temp=self.head
        while temp is not None:
            print(temp.get_data())
            temp=temp.get_next()

def remove_duplicates(duplicate_list):
    temp=duplicate_list.get_head()
    while(temp.get_next()):
        if temp.get_data()==temp.get_next().get_data():
            temp1=temp
            temp=temp.get_next()
            print("removed: "+str(temp1.get_data()))
            duplicate_list.delete(temp1.get_data())
            continue
        temp=temp.get_next()
    duplicate_list.display()
    return duplicate_list

duplicate_list=LinkedList()
duplicate_list.insert_at_end(10)
duplicate_list.insert_at_end(10)
duplicate_list.insert_at_end(20)
duplicate_list.insert_at_end(20)
duplicate_list.insert_at_end(30)
duplicate_list.insert_at_end(30)
duplicate_list.insert_at_end(30)
duplicate_list.insert_at_end(40)
duplicate_list.insert_at_end(50)    

remove_duplicates(duplicate_list)




        
