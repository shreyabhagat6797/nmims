class Node:
    def __init__(self,data):
        self.data=data
        self.next=None

    def set_data(self,data):
        self.data=data

    def get_data(self):
        return self.data

    def set_next(self,next):
        self.next=next

    def get_next(self):
        return self.next

class LinkedList:
    def __init__(self):
        self.head=None
        self.tail=None

    def get_head(self):
        return self.head

    def get_tail(self):
        return self.tail

    def insert_at_end(self,data):   
        new_node=Node(data)  #create new node
        if(self.head is None): #if empty
            self.head=self.tail=new_node    #set new node as head & tail
            print ("element added successfully ")#+str(self.tail.get_data())
        else:   #if not empty
            self.tail.set_next(new_node)   #set tail next to new node
            self.tail=new_node             #make new node as tail
            print("element added successfully ")#+str(self.tail.get_data())

    def insert_at_beginning(self,data):
        new_node=Node(data)
        new_node.set_next(self.head)
        self.head=new_node
        return "data inserted"

    def insert_in_between(self,data,data_before):
        new_node=Node(data)
        if(data_before==None):    #if data_before is not specified
            new_node.set_next(self.head)
            self.head=new_node
            if(new_node.get_next()==None):
                self.tail=new_node
        else:  #if data_before is specified
            node_before=self.find_node(data_before)   #find node
            if(node_before is not None):    #if found node
                new_node.set_next(node_before.get_next())   #set next of new node
                node_before.set_next(new_node)            #set next of node_before
            else:      #if node not found
                print(data_before," is not present in the linked list")


    def find_node(self,data):
        temp=self.head
        while temp is not None:
            if temp.get_data()==data:
                return temp
            temp=temp.next
        return None

    def delete(self,data):
        node=self.find_node(data)
        if (node is not None):  #if data is found and not empty
            if(node==self.head):     #if data is head
                if(self.head==self.tail):  
                    self.tail=None
                self.head=node.get_next()
            else:
                temp=self.head
                while(temp is not None ):  #to travel till that element
                    if(temp.get_next()==node):   #if next element is ur data to be deleted
                        temp.set_next(node.get_next())   #set before element next to node
                        if(node==self.tail):   #if element deleted is tail
                            self.tail=temp #set previous element as tail
                        node.set_next(None)  
                        break
                    temp=temp.get_next()    #else travel till the next element is found
            print("element deleted")
        else:
            print(data," is not present in linkedlist")

    def display(self):
        temp=self.head
        while temp is not None:
            print(temp.get_data())
            temp=temp.get_next()

if __name__=="__main__":
    mylist=LinkedList()
    while True:
        print("\n Select option")
        print("1)Add at end : ","2) Add before: ","3) Add at beginning: ","4) Delete: ","5) find node: ","6) Display")
        do=int(input("Enter your choice: "))
        if do==1:
            data=int(input("Enter the element to be inserted: "))
            result=mylist.insert_at_end(data)
            print(result)
            #print(mylist)
        elif do==2:
            data=int(input("enter the element to be inserted: "))
            data_before=int(input("enter the element before: "))
            result=mylist.insert_in_between(data,data_before)
            print(result)
            #print(mylist)
        elif do==3:
            data=int(input("enter the element to be inserted: "))
            mylist.insert_at_beginning(data)
        elif do==4:
            data=int(input("enter the data to be deleted: "))
            mylist.delete(data)
        elif do==5:
            data=int(input("enter the elemnt to be searched: "))
            result=mylist.find_node(data)
            if result is not None:
                print(result)
            else:
                print("data not found")
        elif do==6:
            mylist.display()
        else:
            print("wrong selection")







        
